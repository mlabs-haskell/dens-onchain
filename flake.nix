{
  description = "DeNS Contract Tests";
  nixConfig = {
    # We don't use Recursive Nix yet.
    extra-experimental-features = [ "nix-command" "flakes" ];
    extra-substituters = [ "https://cache.iog.io" "https://mlabs.cachix.org" ];
    extra-trusted-public-keys = [ "hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=" ];
    allow-import-from-derivation = "true";
    auto-optimise-store = "true";
    bash-prompt = "\\[\\e[0m\\][\\[\\e[0;2m\\]nix \\[\\e[0;1m\\]dens-tests \\[\\e[0;93m\\]\\w\\[\\e[0m\\]]\\[\\e[0m\\]$ \\[\\e[0m\\]";
  };

  inputs = {
    tooling.url = "github:mlabs-haskell/mlabs-tooling.nix?ref=2376c911c6f8b6dcf46f479afddd671b3d37de78";
    ply.url = "github:mlabs-haskell/ply?ref=a7e3ea449c1f1770e046d0cda75d9bceb3582323";
    plutarch-numeric.url = "github:liqwid-labs/plutarch-numeric?ref=5c39d997f3e2057562fb879d84cc79fe6951627d";
    plutarch.url = "github:Plutonomicon/plutarch?ref=01a67f56b2bf428538e92ed9ada0ce88d90ab636";
    liqwid-plutarch-extra.url = "github:Liqwid-Labs/liqwid-plutarch-extra?ref=f9fa149db0b640c87268ee8865d4dd4175470937";
    plutarch-quickcheck.url = "github:liqwid-labs/plutarch-quickcheck?ref=e6f0d2d6576932faaa08663d40ae1fb970634798";
    plutus-simple-model.url = "github:mlabs-haskell/plutus-simple-model?ref=6b3305150eb65dacc6840da6a41bfe2844902c6e";
  };

  outputs = inputs@{ self, tooling, ... }: tooling.lib.mkFlake { inherit self; }
    {
      imports = [
        (tooling.lib.mkHaskellFlakeModule1 {
          project.src = ./.;
          project.extraHackage = [
            "${inputs.plutarch}"
            "${inputs.plutarch}/plutarch-extra"
            "${inputs.plutarch}/plutarch-test"
            "${inputs.ply}/ply-core"
            "${inputs.ply}/ply-plutarch"
            "${inputs.plutarch-numeric}"
            "${inputs.liqwid-plutarch-extra}"
            "${inputs.plutarch-quickcheck}"
            "${inputs.plutus-simple-model}/psm"
            "${inputs.plutus-simple-model}/cardano-simple"
          ];
          project.modules = [
            ({ config, ... }: {
              packages.plutus-simple-model.doHaddock = false;
            })
          ];
          project.shell.withHoogle = true;
        })
      ];
      perSystem = { config, pkgs, lib, ... }: {
        # FIXME real haddock generated by tooling is broken
        packages.haddock = lib.mkForce (pkgs.runCommand "empty-package" { } "mkdir $out");
      };
    };
}
